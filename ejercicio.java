/* ejercicio.java */
/* Generated By:JavaCC: Do not edit this line. ejercicio.java */
class ejercicio implements ejercicioConstants {

        public static void main (String[] args) throws ParseException{

                try {
                        ejercicio analizador = new ejercicio(System.in);
                        analizador.programa();
                }
                catch(ParseException e) {
                        System.out.println("Error: ");
                        System.out.println(e.getMessage());
                }
        }

// Metodo para imprimir el id de cada huracan
  static final public String idHur() throws ParseException {Token dato,nombre;
    String identificadorRegistro = "", aux = "";
    // Generar cadena de retorno
        dato = jj_consume_token(IDHURACAN);
aux = dato.image.toString();
                String al = aux.substring(0,2);
                String numberHur = aux.substring(2,4);
                String year = aux.substring(4);

        identificadorRegistro += al + "," + numberHur +"," + year;
    nombre = jj_consume_token(NOMBREH);
identificadorRegistro += nombre.image;
        {if ("" != null) return identificadorRegistro;}
    throw new Error("Missing return statement in function");
  }

  static final public void columnas() throws ParseException {
System.out.println("ocean,numCycl,year,name,numTrcks,yearTrck,monthTrck,dayTrck,hourTrck,minutsTrck,recordId,statusSys,"
                +"latitude,longitude,maxSustWin,minPress,34ktNE,34ktSE,34ktSW,34ktNW,50ktNE,50ktSE,50ktSW,50ktNW,64ktNE,64ktSE,64ktSW,64ktNW,radMaxWind");
  }

  static final public void huracan() throws ParseException {
    jj_consume_token(IDHURACAN);
    jj_consume_token(NOMBREH);
  }

  static final public String datosHur() throws ParseException {Token fecha,velHuracan, lat, longi, maxVientosSost, minPresion,ktNE34, ktSE34,ktSW34, ktNW34, ktNE50, ktSE50, ktSW50,ktNW50, ktNE64, ktSE64,ktSW64,ktNW64, radMaxWind;;
        String anio, mes, dia, hora, minutos, cadena = "",dato = "",wind = "";
        String[] matrizFecha;
    fecha = jj_consume_token(FECHAHUR);
dato = fecha.image.toString();
                matrizFecha = dato.split("," , 2);
                anio = matrizFecha[0].substring(0,4)+ ",";
                mes = matrizFecha[0].substring(4,6)+ ",";
                dia = matrizFecha[0].substring(6)+ ",";
                hora = matrizFecha[1].substring(0,2) + ",";
                minutos = matrizFecha[1].substring(2);
                cadena += anio + mes + dia + hora + minutos;
    velHuracan = jj_consume_token(SHURACAN);
cadena += velHuracan;
    lat = jj_consume_token(LATITUD);
cadena += lat;
    longi = jj_consume_token(LONGITUD);
cadena += longi;
    maxVientosSost = jj_consume_token(WINDSMAX);
cadena += maxVientosSost;
    minPresion = jj_consume_token(WINDSMAX);
cadena += minPresion;
    ktNE34 = jj_consume_token(WINDSMAX);
cadena += ktNE34;
    ktSE34 = jj_consume_token(WINDSMAX);
cadena += ktSE34;
    ktSW34 = jj_consume_token(WINDSMAX);
cadena += ktSW34;
    ktNW34 = jj_consume_token(WINDSMAX);
cadena += ktNW34;
    ktNE50 = jj_consume_token(WINDSMAX);
cadena += ktNE50;
    ktSE50 = jj_consume_token(WINDSMAX);
cadena += ktSE50;
    ktSW50 = jj_consume_token(WINDSMAX);
cadena += ktSW50;
    ktNW50 = jj_consume_token(WINDSMAX);
cadena += ktNW50;
    ktNE64 = jj_consume_token(WINDSMAX);
cadena += ktNE64;
    ktSE64 = jj_consume_token(WINDSMAX);
cadena += ktSE64;
    ktSW64 = jj_consume_token(WINDSMAX);
cadena += ktSW64;
    ktNW64 = jj_consume_token(WINDSMAX);
cadena += ktNW64;
    radMaxWind = jj_consume_token(WINDSMAX);
wind = ktNW64.image.toString();
        wind = wind.replace(",", "");
                cadena += wind;

                {if ("" != null) return cadena;}
    throw new Error("Missing return statement in function");
  }

  static final public void programa() throws ParseException {String idH, datosHurReg;
    label_1:
    while (true) {
      columnas();
      label_2:
      while (true) {
        idH = idHur();
        label_3:
        while (true) {
          datosHurReg = datosHur();
System.out.println(idH + datosHurReg);
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case FECHAHUR:{
            ;
            break;
            }
          default:
            jj_la1[0] = jj_gen;
            break label_3;
          }
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case IDHURACAN:{
          ;
          break;
          }
        default:
          jj_la1[1] = jj_gen;
          break label_2;
        }
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IDHURACAN:{
        ;
        break;
        }
      default:
        jj_la1[2] = jj_gen;
        break label_1;
      }
    }
    jj_consume_token(0);
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public ejercicioTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[3];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x10,0x2,0x2,};
   }

  /** Constructor with InputStream. */
  public ejercicio(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public ejercicio(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ejercicioTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public ejercicio(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ejercicioTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public ejercicio(ejercicioTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(ejercicioTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[28];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 3; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 28; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
